#!/usr/bin/env python3

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import shutil
import logging
import argparse
from tempfile import NamedTemporaryFile

from geotk.args import base_parser
from geotk.common import color_log
from geotk.obj2svg import obj2svg



LOG = logging.getLogger("obj2svg")



def main():
    parser = argparse.ArgumentParser(
        parents=[base_parser()],
        description="""\
Convert polygons in a Wavefront OBJ file to paths in SVG format.""")

    parser.add_argument(
        "--unit", "-u",
        action="store", default="",
        help="Units, eg. “mm”, “px”.")

    parser.add_argument(
        "obj",
        metavar="OBJ",
        help="Path to OBJ file.")

    parser.add_argument(
        "svg",
        metavar="SVG",
        nargs="?",
        help="Path to SVG file.")

    args = parser.parse_args()

    level = (logging.ERROR, logging.WARNING, logging.INFO, logging.DEBUG)[
        max(0, min(3, 1 + args.verbose - args.quiet))]

    handler = logging.StreamHandler()
    for name in ("obj2svg", "svg"):
        log = logging.getLogger(name)
        log.addHandler(handler)
        color_log(log)
        log.setLevel(level)


    def wrapper(out):
        with open(args.obj, "r", encoding="utf-8") as obj:
            obj2svg(out, obj, unit=args.unit)


    if args.svg:
        with NamedTemporaryFile("w", encoding="utf=8", delete=False) as out:
            os.fchmod(out.fileno(), os.stat(args.obj).st_mode)
            wrapper(out)
        shutil.move(out.name, args.svg)
    else:
        wrapper(sys.stdout)



if __name__ == "__main__":
    main()
