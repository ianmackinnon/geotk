#!/usr/bin/env python3

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import json
import shutil
import logging
import argparse
from tempfile import NamedTemporaryFile

from geotk.args import base_parser, svg_input_parser
from geotk.common import color_log
from geotk.svg2gcode import svg2gcode



LOG = logging.getLogger("svg2gcode")



def main():
    parser = argparse.ArgumentParser(
        parents=[base_parser(), svg_input_parser()],
        description="Convert paths in an SVG file to "
        "G-code format for plotting.")

    parser.add_argument(
        "conf",
        metavar="CONF",
        action="store",
        help="Path to configuration file in JSON format.")
    parser.add_argument(
        "svg",
        metavar="SVG",
        help="Path to SVG file.")
    parser.add_argument(
        "gcode",
        metavar="GCODE",
        nargs="?",
        help="Path to G-code file.")

    args = parser.parse_args()

    level = (logging.ERROR, logging.WARNING, logging.INFO, logging.DEBUG)[
        max(0, min(3, 1 + args.verbose - args.quiet))]

    handler = logging.StreamHandler()
    for name in ("svg2gcode", "svg"):
        log = logging.getLogger(name)
        log.addHandler(handler)
        color_log(log)
        log.setLevel(level)


    with open(args.conf) as conf_file:
        conf = json.load(conf_file)

    def wrapper(out):
        with open(args.svg, "r", encoding="utf-8") as svg:
            svg2gcode(
                out, svg,
                conf=conf,
                step_dist=args.distance_step, step_angle=args.angle_step,
                step_min=args.minimum_step
            )

    if args.gcode:
        with NamedTemporaryFile("w", encoding="utf=8", delete=False) as out:
            os.fchmod(out.fileno(), os.stat(args.svg).st_mode)
            wrapper(out)
        shutil.move(out.name, args.gcode)
    else:
        wrapper(sys.stdout)



if __name__ == "__main__":
    main()
